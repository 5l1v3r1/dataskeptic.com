import Immutable from 'immutable';

import getBlog from 'daos/getBlog';
import getBlogContent from 'daos/getBlogContent'

const init = {
  blogs: [],
  folders: [],
  blogs_loaded: 0,
  blog_focus: {blog: undefined, loaded: 0, content: ""},
  related: [],
  transcript_map: {},
  env: "prod"  // client/index.jsx will dispatch SET_BLOG_ENVIRONMENT on init
}

const defaultState = Immutable.fromJS(init);

export default function blogsReducer(state = defaultState, action) {
  var nstate = state.toJS()
  switch(action.type) {
    case 'SET_BLOG_ENVIRONMENT':
      nstate.env = action.payload
      break
    case 'CLEAR_FOCUS_BLOG':
      console.log("yes indeed")
      nstate.blog_focus = {blog: undefined, loaded: 0, content: ""}
      break
    case 'ADD_BLOG':
      // This event is generated by async loads and needs to kick off the content download on success
      var blog = action.payload.blog
      var dispatch = action.payload.dispatch
      nstate.blog_focus.blog = blog
      break
    case 'SET_FOCUS_BLOG':
      var blog = action.payload.blog
      var fburi = ""
      if (nstate.blog_focus.blog != undefined) {
        fburi = nstate.blog_focus.blog.uri
      }
      if (blog.uri != fburi) {
        nstate.blog_focus.blog = blog
        nstate.blog_focus.loaded = 1
        nstate.blog_focus.content = ""
      }
      break
    case 'REQUEST_INJECT_BLOG':

      var i = 0
      nstate.blog_focus.loaded = 0        
      while (i < nstate.blogs.length) {
        var b = nstate.blogs[i]
        if (b.uri.indexOf('/episodes/') == -1 && b.uri.indexOf('/transcripts/') == -1) {
          nstate.blog_focus.blog = b
          nstate.blog_focus.loaded = 1
          nstate.blog_focus.content = ""
          var dispatch = action.payload.dispatch
          setTimeout(function() {
            console.log(2)
            getBlogContent(dispatch, b, env)
          },1)
          i = nstate.blogs.length
        }
        i += 1
      }
      break
    case 'INJECT_BLOG':
      // This event is generated to handle data that was prefetched and just needs to be injected
      var blog = action.payload.blog
      var loaded = 0
      nstate.blog_focus.blog = blog
      nstate.blog_focus.loaded = loaded
      break
    case 'PRE-FETCH-INJECT':
      var p = action.payload
      var blog = p.blog
      var content = p.content
      nstate.blog_focus = {blog, loaded: 1, content}
      break
    case 'ADD_BLOG_CONTENT':
      console.log(action.payload)
      var content = action.payload.content
      var nblog = action.payload.blog
      var cblog = nstate.blog_focus.blog
      if (nblog['uri'] == cblog['uri']) {
        nstate.blog_focus.loaded = 1
        nstate.blog_focus.content = action.payload.content
      } else {
        console.log([blog['uri'], 'does not match', cblog['uri']])
      }
      break
    case 'LOAD_BLOG_AND_CONTENT':
      var pathname = action.payload.pathname // the actual url without tld
      var dispatch = action.payload.dispatch
      var pn = pathname
      var key = '/blog'
      if (pathname.indexOf(key) == 0) {
        pn = pathname.substring(key.length, pathname.length)        
      }
      var load = true

      for (var i=0; i < nstate.blogs.length; i++) {
        var blog = nstate.blogs[i]
        if (blog.prettyname == pn) {
          console.log("found in cache")
          var env = nstate.env
          if (nstate.blog_focus.prettyname == blog.prettyname) {
            console.log("Already loaded")
            if (nstate.blog_focus.loaded == 1) {
              load = false
              break
            } else {
              console.log("Had blog metadata but not content")
              getBlogContent(dispatch, blog, env)
            }
          } else {
            console.log("Stale cache")
            nstate.blog_focus.blog = blog
            nstate.blog_focus.loaded = 0
            nstate.blog_focus.content = ""
            getBlogContent(dispatch, blog, env)
            load = false
          }
        }
      }
      if (load) {
        nstate.blog_focus = {blog: undefined, loaded: 0, content: ""}
        console.log("getBlog:" + pathname)
        getBlog(dispatch, nstate.env, pathname)
      }
      break
    case 'LOAD_RELATED':
      var pathname = action.payload.pathname
      var dispatch = action.payload.dispatch      
      var pn = pathname
      var uri = "/api/related?uri=/blog" + pn
      console.log(uri)
        axios
            .get(uri)
            .then(function(resp) {
              var data = resp['data']
              var items = data
              console.log("Got related and did nothing with them")
            })
            .catch(function(err) {
              console.log(err)
            })
      break    
    case 'ADD_BLOGS':
  	  nstate.blogs = action.payload
      for (var i=0; i < nstate.blogs.length; i++) {
        var blog = nstate.blogs[i]
        if (blog.guid != undefined && blog.uri.indexOf('/transcripts/') != -1) {
          nstate.transcript_map[blog.guid] = blog
        }
      }
      break
    case 'SET_BLOGS_LOADED':
  	  nstate.blogs_loaded = action.payload
      break
    case 'FETCH_BLOGS_ERROR':
      nstate.blogs_loaded = -1
      nstate.blog_focus.loaded = -1
      break
    case 'SET_FOLDERS':
      nstate.folders = action.payload
      break
  }
  console.log("reducer complete")
  return Immutable.fromJS(nstate)
}

